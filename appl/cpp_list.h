/**
 *  @file       cpp_list.h
 *
 *  @date       2019.05.17
 *  @author     Stulov Tikhon (kudesnick@inbox.ru)
 *
 *  @brief      Шаблонный класс списка.
 *  @details    шаблонный класс списка, позволяющий статически объединять объекты родственных
 *  классов в односвязный список. Формирование списка происходит на этапе запуска программы до входа
 *  в main. При этом связанные объекты могут находиться в разных модулях. От программиста не
 *  требуется вызова каких-либо инициализационных функций. Доступ к элементам списка может
 *  осуществляться через статические функции класса.
 */

#pragma once

/**
 * @brief Шаблонный класс списка
 * @details Все объекты классов, наследуемых от этого шаблона, параметризуемого одинаковым типом,
 * собираются в список назависимо от их расположения
 *
 * @tparam T - тип элемента списка
 *
 * @note список в текущей реализации не может быть собран на этапе компиляции (constexpr)
 * по этому все наследники данного шаблона также не могут быть объявлены с модификатором constexpr
 */
template<typename _T> class cpp_list
{
private:
    /// Указатель на следующий элемент списка
    cpp_list *p_next_;
    /// Статический указатель на первый элемент списка
    static inline cpp_list *p_first_ = NULL;

public:
    /**
     * @brief Конструктор по умолчанию.
     * @details Добавляет элемент в начало списка.
     */
    cpp_list()
    {
        p_next_ = p_first_;
        p_first_ = this;
    };

    /// Возвращает указатель на первый элемент списка
    static inline cpp_list *const& first = p_first_;

    /// Возвращает указатель на следующий элемент списка
    cpp_list *const& next = p_next_;

    /**
     * @brief Применить функцию последовательно ко всем элементам
     * @details Применить функцию, передаваемую в качестве аргумента, последовательно ко всем
     * элементам списка. Функция должна соответствовать сигнатуре bool(*)(_T *&). Может иметь
     * дополнительные параметры, после _T *&.
     * Если функция возвращает false, то цикл прохода по списку прерывается.
     *
     * @param _enum_func Функция, применяемая к элемету.
     */
    template<typename _lambda_t> static void enumerate(_lambda_t _enum_func)
    {
        for (_T *el_ptr = static_cast<_T *>(el_ptr->first);
             el_ptr != nullptr && !_enum_func(el_ptr);
             el_ptr = static_cast<_T *>(el_ptr->next));
    };
};
